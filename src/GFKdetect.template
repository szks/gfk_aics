#include <stdio.h>
#include <stdlib.h>
#include "mpi.h"
#include "my_timing.h"

#define LIST 44
#define MAX_RANK 2048

int main(int argc, char *argv[])
{
    int nPE, myrank;
    int sample, thread;
    MPI_Comm barrier[MAX_RANK];
    double t, t0;

    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &nPE);
    MPI_Comm_rank(MPI_COMM_WORLD, &myrank);

    t0 = MPI_Wtime();

#ifdef CHDIR
    {
        char dir[10];
        sprintf(dir,"./%d", myrank);
        if (mkdir(dir, 0777) != 0) {
            perror(dir);
            /* MPI_Abort(MPI_COMM_WORLD, 1); */
        }
        if (chdir(dir) != 0) {
            perror(dir);
            MPI_Abort(MPI_COMM_WORLD, 1);
        }
    }
#endif

    //--- Asign sample number & thread number(in 1 sample), then split communicator
    if ( nPE >= MAX_RANK*LIST ){
        fprintf(stderr,"GFK_error: Number of process(%d) is exceeded maximum value.\n", nPE);
        MPI_Abort(MPI_COMM_WORLD, 1);
    }

    sample = myrank / LIST;
    thread = myrank % LIST;
    MPI_Comm_split(MPI_COMM_WORLD, sample, myrank, &barrier[sample]);

    //---
    //--- juncBlat.sh
    //---
    SYSTEM("GFKDIR/juncBlat.sh GFKDIR SHAREDDIR %d %d %d", myrank, sample, thread);

    BARRIER(barrier[sample]);

    //---
    //--- catCandFusion.sh
    //---
    if (myrank%LIST == 0){
        SYSTEM("GFKDIR/catCandFusion.sh GFKDIR SHAREDDIR %d", sample);
    }

    BARRIER(barrier[sample]);

    //---
    //--- makeComb2seq.sh
    //---
    SYSTEM("GFKDIR/makeComb2seq.sh GFKDIR SHAREDDIR %d %d %d", myrank, sample, thread);

    BARRIER(barrier[sample]);

    //---     
    //--- makeContig.sh
    //---
    if (myrank%LIST == 0) {
        SYSTEM("GFKDIR/makeContig_SOAP.sh GFKDIR SHAREDDIR %d",sample);
    }

    //---
    //--- makePrimer.sh
    //---
    if (myrank%LIST == 0) {
        SYSTEM("GFKDIR/makePrimer.sh GFKDIR SHAREDDIR %d",sample);
    }

    MPI_Barrier(MPI_COMM_WORLD);
    t = MPI_Wtime() - t0;
    if (myrank == 0) fprintf(stderr, "\ntime = %f\n", t);

    MPI_Finalize();
    return 0; 
}
